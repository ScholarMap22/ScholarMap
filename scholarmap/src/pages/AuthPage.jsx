import { useState } from "react";
import { auth, googleProvider } from "../../firebase";
import { signInWithEmailAndPassword, createUserWithEmailAndPassword, signInAnonymously, signInWithPopup } from "firebase/auth";
import { useNavigate } from "react-router-dom";

export default function AuthPage() 
{
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [isRegister, setIsRegister] = useState(false);
    const navigate = useNavigate();

    // üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ email
    const handleAuth = async () => 
    {
        try 
        {
            if (isRegister) 
            {
                await createUserWithEmailAndPassword(auth, email, password);
            } 
            else 
            {
                await signInWithEmailAndPassword(auth, email, password);
            }
            navigate("/"); // –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        } 
        catch (error) 
        {
            console.error("–û—à–∏–±–∫–∞:", error.message);
        }
    };

    // üîπ –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google
    const handleGoogleSignIn = async () => 
    {
        try 
        {
            await signInWithPopup(auth, googleProvider);
            navigate("/"); 
        } 
        catch (error) 
        {
            console.error("–û—à–∏–±–∫–∞ Google –≤—Ö–æ–¥–∞:", error.message);
        }
    };

    // üîπ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤—Ö–æ–¥
    const handleAnonymousSignIn = async () => 
    {
        try 
        {
            await signInAnonymously(auth);
            navigate("/");
        } 
        catch (error) 
        {
            console.error("–û—à–∏–±–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –≤—Ö–æ–¥–∞:", error.message);
        }
    };

    return (
        <div className="flex flex-col items-center p-4">
            <h2 className="text-xl mb-4">{isRegister ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" : "–í—Ö–æ–¥"}</h2>
            
            {/* –ü–æ–ª–µ Email */}
            <input 
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="border p-2 mb-2 w-80"
            />

            {/* –ü–æ–ª–µ –ü–∞—Ä–æ–ª—è */}
            <input 
                type="password"
                placeholder="–ü–∞—Ä–æ–ª—å"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="border p-2 mb-2 w-80"
            />

            {/* –ö–Ω–æ–ø–∫–∞ –í—Ö–æ–¥–∞/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
            <button onClick={handleAuth} className="bg-blue-500 text-white p-2 w-80 mb-2">
                {isRegister ? "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" : "–í–æ–π—Ç–∏"}
            </button>

            {/* –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google */}
            <button onClick={handleGoogleSignIn} className="bg-red-500 text-white p-2 w-80 mb-2">
                –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
            </button>

            {/* –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤—Ö–æ–¥ */}
            <button onClick={handleAnonymousSignIn} className="bg-gray-500 text-white p-2 w-80 mb-2">
                –í–æ–π—Ç–∏ –∫–∞–∫ –≥–æ—Å—Ç—å
            </button>

            {/* –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –í—Ö–æ–¥–æ–º –∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π */}
            <p onClick={() => setIsRegister(!isRegister)} className="text-blue-600 cursor-pointer">
                {isRegister ? "–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏" : "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
            </p>
        </div>
    );
}
